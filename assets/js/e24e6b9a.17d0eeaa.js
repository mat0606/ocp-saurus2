"use strict";(self.webpackChunkocp_saurus_2=self.webpackChunkocp_saurus_2||[]).push([[8590],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=n.createContext({}),p=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(a),u=r,g=c["".concat(i,".").concat(u)]||c[u]||m[u]||o;return a?n.createElement(g,s(s({ref:t},d),{},{components:a})):n.createElement(g,s({ref:t},d))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,s=new Array(o);s[0]=u;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[c]="string"==typeof e?e:r,s[1]=l;for(var p=2;p<o;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5162:(e,t,a)=>{a.d(t,{Z:()=>s});var n=a(7294),r=a(6010);const o="tabItem_Ymn6";function s(e){let{children:t,hidden:a,className:s}=e;return n.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:a},t)}},5488:(e,t,a)=>{a.d(t,{Z:()=>u});var n=a(7462),r=a(7294),o=a(6010),s=a(2389),l=a(7392),i=a(7094),p=a(2466);const d="tabList__CuJ",c="tabItem_LNqP";function m(e){const{lazy:t,block:a,defaultValue:s,values:m,groupId:u,className:g}=e,k=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),h=m??k.map((e=>{let{props:{value:t,label:a,attributes:n}}=e;return{value:t,label:a,attributes:n}})),b=(0,l.l)(h,((e,t)=>e.value===t.value));if(b.length>0)throw new Error(`Docusaurus error: Duplicate values "${b.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===s?s:s??k.find((e=>e.props.default))?.props.value??k[0].props.value;if(null!==N&&!h.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${h.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:f,setTabGroupChoices:y}=(0,i.U)(),[v,w]=(0,r.useState)(N),_=[],{blockElementScrollPositionUntilNextRender:D}=(0,p.o5)();if(null!=u){const e=f[u];null!=e&&e!==v&&h.some((t=>t.value===e))&&w(e)}const O=e=>{const t=e.currentTarget,a=_.indexOf(t),n=h[a].value;n!==v&&(D(t),w(n),null!=u&&y(u,String(n)))},E=e=>{let t=null;switch(e.key){case"Enter":O(e);break;case"ArrowRight":{const a=_.indexOf(e.currentTarget)+1;t=_[a]??_[0];break}case"ArrowLeft":{const a=_.indexOf(e.currentTarget)-1;t=_[a]??_[_.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",d)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},g)},h.map((e=>{let{value:t,label:a,attributes:s}=e;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:v===t?0:-1,"aria-selected":v===t,key:t,ref:e=>_.push(e),onKeyDown:E,onClick:O},s,{className:(0,o.Z)("tabs__item",c,s?.className,{"tabs__item--active":v===t})}),a??t)}))),t?(0,r.cloneElement)(k.filter((e=>e.props.value===v))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},k.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}function u(e){const t=(0,s.Z)();return r.createElement(m,(0,n.Z)({key:String(t)},e))}},9925:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>k,frontMatter:()=>l,metadata:()=>p,toc:()=>c});var n=a(7462),r=(a(7294),a(3905)),o=a(5488),s=a(5162);const l={title:"OCP and Nutanix NDB"},i="OCP and Nutanix NDB",p={unversionedId:"ocp_ndb/ocp_ndb",id:"ocp_ndb/ocp_ndb",title:"OCP and Nutanix NDB",description:"In this lab we will setup custom micro-service based application with VM based Nutanix Database NDB service.",source:"@site/docs/ocp_ndb/ocp_ndb.md",sourceDirName:"ocp_ndb",slug:"/ocp_ndb/",permalink:"/ocp-saurus2/ocp_ndb/",draft:!1,editUrl:"https://github.com/mat0606/ocp-saurus2/edit/main/docs/ocp_ndb/ocp_ndb.md",tags:[],version:"current",frontMatter:{title:"OCP and Nutanix NDB"},sidebar:"tutorialSidebar",previous:{title:"Provision Storage for Image Registry",permalink:"/ocp-saurus2/optional_labs/ocp_image_registry"},next:{title:"Linux Tools VM",permalink:"/ocp-saurus2/toolsvms/linux_tools_vm"}},d={},c=[{value:"Pre-requisites for using NDB Deployed Databases",id:"pre-requisites-for-using-ndb-deployed-databases",level:2},{value:"High Level Overview of NDB and OCP integration",id:"high-level-overview-of-ndb-and-ocp-integration",level:2},{value:"Install NDB Operator on OCP",id:"install-ndb-operator-on-ocp",level:2},{value:"Prepare you Linux Tools VM",id:"prepare-you-linux-tools-vm",level:3},{value:"Install the NDB Operator for OCP",id:"install-the-ndb-operator-for-ocp",level:3},{value:"Create NDB Postgres DB",id:"create-ndb-postgres-db",level:2},{value:"High Level Steps",id:"high-level-steps",level:3},{value:"Prepare Secrets for your Database Server and Database",id:"prepare-secrets-for-your-database-server-and-database",level:3},{value:"Get NDB Cluster&#39;s UUID",id:"get-ndb-clusters-uuid",level:3},{value:"Create Postgres Database using the NDB Operator",id:"create-postgres-database-using-the-ndb-operator",level:3},{value:"Check Database Connectivity",id:"check-database-connectivity",level:3},{value:"Installing a Custom Three-layer Application",id:"installing-a-custom-three-layer-application",level:2},{value:"Create Database Schema and Data",id:"create-database-schema-and-data",level:3},{value:"Install Front End and Back End applications",id:"install-front-end-and-back-end-applications",level:3},{value:"Create Routes to Access the Application",id:"create-routes-to-access-the-application",level:3},{value:"Testing Front End React Application",id:"testing-front-end-react-application",level:3},{value:"Testing Back End Django Application",id:"testing-back-end-django-application",level:3},{value:"Checking Postgres Database Data",id:"checking-postgres-database-data",level:3},{value:"Takeaways",id:"takeaways",level:2}],m=(u="BrowserWindow",function(e){return console.warn("Component "+u+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",e)});var u;const g={toc:c};function k(e){let{components:t,...l}=e;return(0,r.kt)("wrapper",(0,n.Z)({},g,l,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"ocp-and-nutanix-ndb"},"OCP and Nutanix NDB"),(0,r.kt)("p",null,"In this lab we will setup custom micro-service based application with VM based Nutanix Database ",(0,r.kt)("a",{parentName:"p",href:"https://www.nutanix.com/products/database-service"},"NDB")," service. "),(0,r.kt)("p",null,"In recent years, the growth of microservices has lead to use of VM based databases. Although microservices based databases are available,\ncustomers are still using VM based databases as a datastore. The following may be the reason for customers using VM based databases (not limited to):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Customer has majority of databases on VM platform "),(0,r.kt)("li",{parentName:"ul"},"Customers DBA team has more expertise with VM based databases"),(0,r.kt)("li",{parentName:"ul"},"Cloud based database providers (AWS RDS) with several database engines are used prevalently"),(0,r.kt)("li",{parentName:"ul"},"Ease of deployment, scale and security (although security for microservices is improving at an exponential rate)"),(0,r.kt)("li",{parentName:"ul"},"Customer's extensive knowledge in providing high availability, disaster recovery and backups for these VM based databases"),(0,r.kt)("li",{parentName:"ul"},"Knowledge of implementing security practices for VMs in general "),(0,r.kt)("li",{parentName:"ul"},"Customers are using VM based databases and are in the middle of migrating to microservices based databases"),(0,r.kt)("li",{parentName:"ul"},"Customers are using a hybrid database environment - both VM based and microservices based databases and have decided to stay this way")),(0,r.kt)("p",null,"Nutanix NDB offers Databases as a service using NDB. Customers can provision hybrid multicloud DBaaS for Microsoft SQL Server, Oracle, PostgreSQL, MongoDB, and MySQL and be able to efficiently manage hundreds to thousands of databases."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Estimated time to complete this lab is ",(0,r.kt)("strong",{parentName:"p"},"60 minutes"),".")),(0,r.kt)(m,{mdxType:"BrowserWindow"},(0,r.kt)("details",null,(0,r.kt)("summary",null,"Fun fact"),(0,r.kt)("div",null,(0,r.kt)("body",null,"NDB Operator was presented as a project in Nutanix Hackathon in 2022 by the Japan Solution Engineers (SE) team. The SEs identified a need in the  in the field for their customers and developed a version of the NDB Operator for OpenShift. The team went to win the Hackathon tournament and NDB Operator is now an available solution for customers to take advantage of. This is testament of how Nutanix always have value to customers in mind.")))),(0,r.kt)("h2",{id:"pre-requisites-for-using-ndb-deployed-databases"},"Pre-requisites for using NDB Deployed Databases"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"NDB appliance deployed on the Nutanix cluster"),(0,r.kt)("li",{parentName:"ul"},"OCP cluster deployed on the Nutanix cluster - Check the following portions of this guide to create a OCP cluster:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/ocp-saurus2/ocp_ipi_install/"},"OCP with IPI Installer")," "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/ocp-saurus2/ocp_assisted_install/"},"OCP with Assisted Installer")," or "),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/ocp-saurus2/ocp_ntnx_hci/ocp_vms"},"OCP with Nutanix Cloud Manager")))),(0,r.kt)("li",{parentName:"ul"},"Networking requirements adhering to OCP and Nutanix")),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"At the moment only ",(0,r.kt)("strong",{parentName:"p"},"Postgres")," databases are available to be deployed by NDB Operator for OCP. Nutanix will be adding other NDB capable database platforms (MSSQL, MYSQL, Oracle, etc.) incrementally. There are no ETAs at the moment. Please check Nutanix release announcements."),(0,r.kt)("p",{parentName:"admonition"},"Nutanix provides 24x7x365 support for Postgres along with Postgres Professional. See this ",(0,r.kt)("a",{parentName:"p",href:"https://www.nutanix.com/content/dam/nutanix/partners/technology-alliances/solution-briefs/sb-postges-professional-and-nutanix.pdf"},"Solution Brief")," for more details. ")),(0,r.kt)("h2",{id:"high-level-overview-of-ndb-and-ocp-integration"},"High Level Overview of NDB and OCP integration"),(0,r.kt)("p",null,"At a very high level we will perform the following steps:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Install NDB Operator on the OCP cluster"),(0,r.kt)("li",{parentName:"ol"},"Deploy a new NDB Postgres database"),(0,r.kt)("li",{parentName:"ol"},"Install a custom application on OCP"),(0,r.kt)("li",{parentName:"ol"},"Connect application to NDB Postgres database",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Create database schema"),(0,r.kt)("li",{parentName:"ul"},"Populate database with data "))),(0,r.kt)("li",{parentName:"ol"},"Perform tasks at application level"),(0,r.kt)("li",{parentName:"ol"},"Verify presence of data in NDB provisioned database")),(0,r.kt)("h2",{id:"install-ndb-operator-on-ocp"},"Install NDB Operator on OCP"),(0,r.kt)("p",null,"In this section we will install NDB operator and use yaml files to provision a database. The idea is simulate an environment where developers can create database resources as kubernets manifests."),(0,r.kt)("p",null,"This way developers can easily integrate VM based databases in their regular microservices based workflow."),(0,r.kt)("h3",{id:"prepare-you-linux-tools-vm"},"Prepare you Linux Tools VM"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Logon to your Linux Tools VM using root user name and password (Terminal on Mac/ Putty or PowerShell in Windows)"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ssh -l root <Linux Tools VM IP>\n")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Username")," - root")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Password")," - default password")),(0,r.kt)("admonition",{parentName:"li",title:"Can't find the Linux Tools VM?",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you don't have a Linux Tools VM deployed on your HPOC cluster, follow instructions ",(0,r.kt)("a",{parentName:"p",href:"/ocp-saurus2/toolsvms/linux_tools_vm"},"here")," to deploy one.")))),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Depending on you access to ",(0,r.kt)("inlineCode",{parentName:"p"},"kubeconfig")," file or kubeadmin password, logon to the OCP cluster"),(0,r.kt)(o.Z,{groupId:"Login Method",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"kubeconfig file",label:"kubeconfig",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Export your kubeconfig file to env"',title:'"Export',your:!0,kubeconfig:!0,file:!0,to:!0,'env"':!0},"export KUBECONFIG=/root/xyz/auth/kubeconfig\n"))),(0,r.kt)(s.Z,{value:"kubeadmin credentials",label:"kubeadmin",mdxType:"TabItem"},(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Make sure to use your password"',title:'"Make',sure:!0,to:!0,use:!0,your:!0,'password"':!0},"oc login -u kubeadmin -p xxxxx-xxxxx-xxxxx-xxxxx\n"))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Make sure your OCP cluster is accesible"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Ensure that you are getting output"',title:'"Ensure',that:!0,you:!0,are:!0,getting:!0,'output"':!0},"oc get nodes\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install Helm (if it is not present)"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Install latest Helm"',title:'"Install',latest:!0,'Helm"':!0},"curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3\n#\nchmod 700 get_helm.sh\n#\n./get_helm.sh\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Verify Helm version"',title:'"Verify',Helm:!0,'version"':!0},"helm version\n")))),(0,r.kt)("h3",{id:"install-the-ndb-operator-for-ocp"},"Install the NDB Operator for OCP"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Add Nutanix's Helm repo"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm repo add nutanix https://nutanix.github.io/helm/\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Install NDB Operator using Helm"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"helm install ndb-operator nutanix/ndb-operator -n ndb-operator --create-namespace\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Output"',title:'"Output"'},"NAME: ndb-operator\nLAST DEPLOYED: Mon Dec 19 22:58:45 2022\nNAMESPACE: ndb-operator\nSTATUS: deployed           # << Ensure the deployed state\nREVISION: 1\nTEST SUITE: None\n")),(0,r.kt)("admonition",{parentName:"li",type:"info"},(0,r.kt)("p",{parentName:"admonition"},"The operator will be deployed in ",(0,r.kt)("inlineCode",{parentName:"p"},"ndb-operator")," namespace/project."))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Ensure all the resources are healthy in the ",(0,r.kt)("inlineCode",{parentName:"p"},"ndb-operator")," namespace/project."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc get all -n ndb-operator\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Output"',title:'"Output"'},"#\nNAME                                                   READY   STATUS    RESTARTS   AGE\npod/ndb-operator-controller-manager-77fcb496d5-7qcfc   2/2     Running   0          2m16s\n\nNAME                                                      TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE\nservice/ndb-operator-controller-manager-metrics-service   ClusterIP   172.30.244.194   <none>        8443/TCP   2m16s\n\nNAME                                              READY   UP-TO-DATE   AVAILABLE   AGE\ndeployment.apps/ndb-operator-controller-manager   1/1     1            1           2m16s\n\nNAME                                                         DESIRED   CURRENT   READY   AGE\nreplicaset.apps/ndb-operator-controller-manager-77fcb496d5   1         1         1       2m16s\n")),(0,r.kt)("admonition",{parentName:"li",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You can follow the logs of the ",(0,r.kt)("inlineCode",{parentName:"p"},"ndb-operator-controller-manager")," ",(0,r.kt)("inlineCode",{parentName:"p"},"deployment")," to see the activities of the NDB Operator."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc logs -f deployment.apps/ndb-operator-controller-manager -n ndb-operator\n"))))),(0,r.kt)("h2",{id:"create-ndb-postgres-db"},"Create NDB Postgres DB"),(0,r.kt)("p",null,"In this section we will create a Postgres database using NDB Operator. "),(0,r.kt)("h3",{id:"high-level-steps"},"High Level Steps"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"NDB operator will communicate with NDB server with a create database request "),(0,r.kt)("li",{parentName:"ol"},"NDB server will create the Postgres database VM (instance) and postgres database"),(0,r.kt)("li",{parentName:"ol"},"NDB server will respond to NDB Operator with the result of the requested operation")),(0,r.kt)("h3",{id:"prepare-secrets-for-your-database-server-and-database"},"Prepare Secrets for your Database Server and Database"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a new OCP project"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc new-project ndb\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a secret for NDB Operator to access NDB server"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat << EOF > your-ndb-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: your-ndb-secret\ntype: Opaque\nstringData:\n  username: username-for-ndb-server\n  password: password-for-ndb-server\nEOF\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Edit the manifest with your NDB server credentials"',title:'"Edit',the:!0,manifest:!0,with:!0,your:!0,NDB:!0,server:!0,'credentials"':!0},"vi your-ndb-secret.yaml\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Apply the manifest to create NDB server credentials secret"',title:'"Apply',the:!0,manifest:!0,to:!0,create:!0,NDB:!0,server:!0,credentials:!0,'secret"':!0},"oc apply -f your-ndb-secret.yaml\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a secret with credentials (password and ssh public key) for the new Postgres VM that you will be provisioning."),(0,r.kt)("p",{parentName:"li"},"SSH key is a requirement. This must be included to authenticate to your NDB deployed VM. ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," resource will fail to deploy if ",(0,r.kt)("strong",{parentName:"p"},"ssh-public-key")," is not included."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cat << EOF > your-db-secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: your-db-secret\ntype: Opaque\nstringData:\n  password: password-for-the-database-instance\n  ssh_public_key: SSH-PUBLIC-KEY # >> this must be present\nEOF\n")),(0,r.kt)(m,{mdxType:"BrowserWindow"},(0,r.kt)("details",null,(0,r.kt)("summary",null,"No SSH-PUBLIC-KEY?"),(0,r.kt)("div",null,(0,r.kt)("body",null,(0,r.kt)("admonition",{parentName:"li",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you do not have a ",(0,r.kt)("strong",{parentName:"p"},"SSH-PUBLIC-KEY"),", use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ssh-keygen")," command on your ",(0,r.kt)("strong",{parentName:"p"},"Linux Tools VM")," to create a ssh key pair"),(0,r.kt)("p",{parentName:"admonition"},"Remember to keep it safe somewhere. "),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"ssh-keygen -t rsa -b 2048 -f ~/.ssh/for_ndb   # << accept all default answers\nls -l ~/.ssh/\n## Output here\n~/.ssh/for_ndb.pub  # << use this public key in the your-db-secret manifest \n~/.ssh/for_ndb      # << use this private key to logon to the NDB deployed database server\n"))))))),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Edit the manifest with your Postgres DB server credentials"',title:'"Edit',the:!0,manifest:!0,with:!0,your:!0,Postgres:!0,DB:!0,server:!0,'credentials"':!0},"vi your-db-secret.yaml\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Apply the manifest to create your Postgres DB server credentials secret"',title:'"Apply',the:!0,manifest:!0,to:!0,create:!0,your:!0,Postgres:!0,DB:!0,server:!0,credentials:!0,'secret"':!0},"oc apply -f your-db-secret.yaml\n")))),(0,r.kt)("h3",{id:"get-ndb-clusters-uuid"},"Get NDB Cluster's UUID"),(0,r.kt)("ol",{start:4},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"We need to get the NDB server's cluster UUID to use in the next step; to facilitate this, logon to your NDB VM UI with the following credentials"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Username")," - admin")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Password")," - from your HPOC reservation"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"On the top right-hand corner, click on ",(0,r.kt)("strong",{parentName:"p"},"admin")," user name and select ",(0,r.kt)("strong",{parentName:"p"},"REST API Explorer"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"This will open a new browser tab")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"In the browser tab, scroll to the bottom to see ",(0,r.kt)("strong",{parentName:"p"},"Clusters"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Expand the first GET / clusters API call and click on ",(0,r.kt)("strong",{parentName:"p"},"Try it out")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{src:a(7868).Z,width:"1451",height:"290"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click on ",(0,r.kt)("strong",{parentName:"p"},"Execute")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{src:a(5188).Z,width:"1449",height:"359"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Copy the uuid shown here "),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{src:a(7759).Z,width:"1403",height:"565"})))),(0,r.kt)("h3",{id:"create-postgres-database-using-the-ndb-operator"},"Create Postgres Database using the NDB Operator"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a Database resource by using the following manifest"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{12,18,24,26,29}","{12,18,24,26,29}":!0},'cat << EOF > ndb.yaml\napiVersion: ndb.nutanix.com/v1alpha1\nkind: Database\nmetadata:\n  # This name that will be used within the kubernetes cluster\n  name: dbforflower\nspec:\n  # NDB server specific details\n  ndb:\n    # Cluster id of the cluster where the Database has to be provisioned\n    # Can be fetched from the NDB server\'s GET /clusters endpoint\n    clusterId: "a4cfc2cc-bd00-4cc6-95bd-5f714196db96"   # << NDB server\'s cluster UUID\n    # Credentials secret name for NDB installation\n    # data: username, password, \n    # stringData: ca_certificate\n    credentialSecret: your-ndb-secret\n    # The NDB Server\n    server: https://[NDB IP]:8443/era/v0.9              # << Use NDB server\'s IP\n    # Example URL below\n    # server: https://10.38.7.119:8443/era/v0.9         # << this is NDB URL example\n    # Set to true to skip SSL verification, default: false.\n    skipCertificateVerification: true\n  # Database instance specific details (that is to be provisioned)\n  databaseInstance:\n    # The database instance name on NDB\n    databaseInstanceName: "pgserver"                   # << this will be our databse server name\n    # Names of the databases on that instance\n    databaseNames:\n      - predictiondb                                   # << this will be our databse name\n    # Credentials secret name for NDB installation\n    # data: password, ssh_public_key\n    credentialSecret: your-db-secret\n    size: 10\n    timezone: "UTC"\n    type: postgres\nEOF\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Edit the ",(0,r.kt)("inlineCode",{parentName:"p"},"ndb.yaml")," file to populate with your environment details"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"vi ndb.yaml\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create the NDB ",(0,r.kt)("inlineCode",{parentName:"p"},"Database")," resource"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc apply -f ndb.yaml\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Check the status of the deployment"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc get database \n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Output - you will see provisioning status"',title:'"Output',"-":!0,you:!0,will:!0,see:!0,provisioning:!0,'status"':!0},"NAME          IP ADDRESS    STATUS               DATABASE INSTANCE ID                   DATABASE SERVER ID\ndbforflower                 PROVISIONING         3f04f1f0-36bf-483a-96e6-ccc3c1384c68\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"You can also track the progress of the database deployment by looking at the ",(0,r.kt)("inlineCode",{parentName:"p"},"ndb-operator-controller-manager")," pod logs in ",(0,r.kt)("inlineCode",{parentName:"p"},"ndb-operator-system")," namespace"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Make sure to use your pod name"',title:'"Make',sure:!0,to:!0,use:!0,your:!0,pod:!0,'name"':!0},"oc logs -f deployment.apps/ndb-operator-controller-manager -n ndb-operator\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"You can also login to the NDB web page to see the progress. "),(0,r.kt)("p",{parentName:"li"},"In NDB UI, Select ",(0,r.kt)("strong",{parentName:"p"},"Menu")," ",(0,r.kt)("strong",{parentName:"p"},"Operations")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{src:a(6657).Z,width:"2734",height:"1388"})))),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"It will take about ",(0,r.kt)("strong",{parentName:"p"},"20 minutes")," to provision the ",(0,r.kt)("inlineCode",{parentName:"p"},"pgserver")," database server and ",(0,r.kt)("inlineCode",{parentName:"p"},"predictiondb")," database.")),(0,r.kt)("h3",{id:"check-database-connectivity"},"Check Database Connectivity"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Check the status of NDB deployed database in OCP"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc get database \n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Output - note the READY status and the IP address of the database VM"',title:'"Output',"-":!0,note:!0,the:!0,READY:!0,status:!0,and:!0,IP:!0,address:!0,of:!0,database:!0,'VM"':!0},"NAME          IP ADDRESS    STATUS   DATABASE INSTANCE ID                   DATABASE SERVER ID\ndbforflower   10.38.7.115   READY    3f04f1f0-36bf-483a-96e6-ccc3c1384c68   65e26459-2ebc-40e4-9111-4d02f556fdb8\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"NDB Operator also creates a service and an endpoint for you to access the database server "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc get service, ep \n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Output - note the Cluster IP, endpoint\'s external IP and port number"',title:'"Output',"-":!0,note:!0,the:!0,Cluster:!0,"IP,":!0,"endpoint's":!0,external:!0,IP:!0,and:!0,port:!0,'number"':!0},"NAME                        TYPE                CLUSTER-IP       EXTERNAL-IP   PORT(S)   AGE\nservice/dbforflower-svc     ClusterIP           172.30.38.131    <none>        80/TCP    20m\n\nNAME                        ENDPOINTS           AGE    \nendpoints/dbforflower-svc   10.38.7.115:5432    20m       # << This is IP of the PostGres server deployed by NDB                            \n")),(0,r.kt)("p",{parentName:"li"},"The database is now available as an ",(0,r.kt)("inlineCode",{parentName:"p"},"ClusterIP")," resource on port ",(0,r.kt)("inlineCode",{parentName:"p"},"80"),"service to other workloads."),(0,r.kt)("p",{parentName:"li"},"We just need to use the ",(0,r.kt)("inlineCode",{parentName:"p"},"ClusterIP")," of the database service to the connect the front end application.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Check if you are able to connect to you database. We will do this by deploying a standalone postgres pod."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Deploy the Postgres pod"',title:'"Deploy',the:!0,Postgres:!0,'pod"':!0},"oc run --restart=Never psql --image=quay.io/coreos/postgres --env=POSTGRES_PASSWORD=postgres_password\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Login to the pod and connect to database server"',title:'"Login',to:!0,the:!0,pod:!0,and:!0,connect:!0,database:!0,'server"':!0},"oc exec -it psql -- /bin/sh\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Inside the Postgres pod, logon to the predictiondb database"',title:'"Inside',the:!0,Postgres:!0,"pod,":!0,logon:!0,to:!0,predictiondb:!0,'database"':!0},"psql -h dbforflower-svc -p 80 -U postgres -d predictiondb\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Enter postgres_password as the password"',title:'"Enter',postgres_password:!0,as:!0,the:!0,'password"':!0},'# psql -h dbforflower-svc -p 80 -U postgres -d predictiondb\nPassword for user postgres: \npsql (9.4.5, server 10.4)\nWARNING: psql major version 9.4, server major version 10.4.\n         Some psql features might not work.\nType "help" for help.\n\npredictiondb=#\n')),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Run \\du command to list the users"',title:'"Run',"\\du":!0,command:!0,to:!0,list:!0,the:!0,'users"':!0},"predictiondb=# \\du \n                                                        List of roles\n  Role name       |                   Attributes                   |                          Member of                           \n----------------------+------------------------------------------------+--------------------------------------------------------------\npg_monitor           | Cannot login                                   | {pg_read_all_settings,pg_read_all_stats,pg_stat_scan_tables}\npg_read_all_settings | Cannot login                                   | {}\npg_read_all_stats    | Cannot login                                   | {}\npg_signal_backend    | Cannot login                                   | {}\npg_stat_scan_tables  | Cannot login                                   | {}\npostgres             | Superuser, Create role, Create DB, Replication | {}\n")))),(0,r.kt)("p",null,"You are able to connect to the database without leaving the OCP command line environment. This is what most developers and devops engineers will have access to, so they can deploy applications. "),(0,r.kt)("h2",{id:"installing-a-custom-three-layer-application"},"Installing a Custom Three-layer Application"),(0,r.kt)("p",null,"In this section we will install a three-layer application (front end, back end and database) to showcase the value of NDB Operator to a customer."),(0,r.kt)("admonition",{title:"References",type:"note"},(0,r.kt)("p",{parentName:"admonition"},"All ideas for this three-layer this application come from this ",(0,r.kt)("a",{parentName:"p",href:"https://www.datagraphi.com/blog/post/2021/2/10/kubernetes-guide-deploying-a-machine-learning-app-built-with-django-react-and-postgresql-using-kubernetes"},"blog"),"."),(0,r.kt)("p",{parentName:"admonition"},"We have only modified the implementation to suit deployment in a OCP cluster with NDB deployed Postgres database.")),(0,r.kt)("h3",{id:"create-database-schema-and-data"},"Create Database Schema and Data"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Apply the application secrets manifest"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc apply -f https://raw.githubusercontent.com/nutanix-japan/ocp-saurus/main/docs/ocp_ndb/k8s/app_secrets.yaml\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Download and edit the configmap to match your database service name and port number (if you used a different database name in your ",(0,r.kt)("inlineCode",{parentName:"p"},"ndb.yaml"),"  manifest)"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://raw.githubusercontent.com/nutanix-japan/ocp-saurus/main/docs/ocp_ndb/k8s/app_variables.yaml\n#\nvi app_variables.yaml\n")),(0,r.kt)(m,{mdxType:"BrowserWindow"},(0,r.kt)("details",null,(0,r.kt)("summary",null,"Make sure that your database service name and port number matches"),(0,r.kt)("div",null,(0,r.kt)("body",null,(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{23,26}","{23,26}":!0},'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: app-variables\ndata:\n  #env variables for the postgres component\n  POSTGRES_USER: postgres_user\n  POSTGRES_DB: predictiondb\n\n  #env variables for the backend component\n  DJANGO_ENV: development\n  DEBUG: "1"\n  SECRET_KEY: secretsecretsecretsecretsecret\n  DJANGO_ALLOWED_HOSTS: "*"\n  DJANGO_ADMIN_USER: admin\n  DJANGO_ADMIN_EMAIL: "admin@example.com"\n  \n  #db server components\n  DATABASE: postgres\n  DB_ENGINE: "django.db.backends.postgresql"  \n  DB_DATABASE: predictiondb\n  DB_USER: postgres \n  DB_HOST:        #  << Match your database service    \n  # Example\n  # DB_HOST: dbforflower-svc\n  DB_PORT:        #  << Match your database service\'s port number\n  # Example\n  # DB_PORT: "80"                  \n'))))))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"After making sure that your database service name and port number matches, apply the configmap manifest"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc apply -f app_variables.yaml\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run this job to populate your database with schema and data"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc apply -f https://raw.githubusercontent.com/nutanix-japan/ocp-saurus/main/docs/ocp_ndb/k8s/job_django.yaml\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Monitor the job to make sure it has completed"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc get job django-job -w\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Output"',title:'"Output"'},"# oc get job -w\nNAME         COMPLETIONS   DURATION   AGE\ndjango-job   0/1           14s        15s\ndjango-job   0/1           14s        15s\ndjango-job   0/1           17s        18s\ndjango-job   1/1           19s        20s   # << Wait for completion\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"You can analyse the logs to make sure the job has completed without any issues"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Analyse the pod logs - your pod name will be different"',title:'"Analyse',the:!0,pod:!0,logs:!0,"-":!0,your:!0,name:!0,will:!0,be:!0,'different"':!0},"oc logs django-job-cmcxk\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="You must see migration jobs runnig - ignore warnings"',title:'"You',must:!0,see:!0,migration:!0,jobs:!0,runnig:!0,"-":!0,ignore:!0,'warnings"':!0},"Running migrations:\nApplying contenttypes.0001_initial... OK\nApplying auth.0001_initial... OK\nApplying admin.0001_initial... OK\nApplying admin.0002_logentry_remove_auto_add... OK\nApplying admin.0003_logentry_add_action_flag_choices... OK\nApplying contenttypes.0002_remove_content_type_name... OK\nApplying auth.0002_alter_permission_name_max_length... OK\nApplying auth.0003_alter_user_email_max_length... OK\nApplying auth.0004_alter_user_username_opts... OK\nApplying auth.0005_alter_user_last_login_null... OK\nApplying auth.0006_require_contenttypes_0002... OK\nApplying auth.0007_alter_validators_add_error_messages... OK\nApplying auth.0008_alter_user_username_max_length... OK\nApplying auth.0009_alter_user_last_name_max_length... OK\nApplying auth.0010_alter_group_name_max_length... OK\nApplying auth.0011_update_proxy_permissions... OK\nApplying auth.0012_alter_user_first_name_max_length... OK\nApplying authtoken.0001_initial... OK\nApplying authtoken.0002_auto_20160226_1747... OK\nApplying sessions.0001_initial... OK\n")),(0,r.kt)("admonition",{parentName:"li",title:"what if my job fails?",type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"You would have to troubleshoot. "),(0,r.kt)("p",{parentName:"admonition"},"Delete your job, change any references in ",(0,r.kt)("strong",{parentName:"p"},"app_variables")," config map that may have been wrong, and re-run the job."),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc delete -f job_django.yaml\noc apply -f job_django\n")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Log back into the database to check if there are new tables "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Login to the pod and connect to database server"',title:'"Login',to:!0,the:!0,pod:!0,and:!0,connect:!0,database:!0,'server"':!0},"oc exec -it psql -- /bin/sh\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Inside the Postgres pod, logon to the predictiondb database"',title:'"Inside',the:!0,Postgres:!0,"pod,":!0,logon:!0,to:!0,predictiondb:!0,'database"':!0},"psql -h dbforflower-svc -p 80 -U postgres -d predictiondb\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Enter postgres_password as the password"',title:'"Enter',postgres_password:!0,as:!0,the:!0,'password"':!0},'# psql -h dbforflower-svc -p 80 -U postgres -d predictiondb\nPassword for user postgres: \npsql (9.4.5, server 10.4)\nWARNING: psql major version 9.4, server major version 10.4.\n         Some psql features might not work.\nType "help" for help.\n\npredictiondb=#\n')),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",11:!0,className:"language-bash",metastring:'title="You should see 11 tables created"',title:'"You',should:!0,see:!0,tables:!0,'created"':!0},"predictiondb=# \\dt\n               List of relations\n Schema |            Name            | Type  |  Owner   \n--------+----------------------------+-------+----------\n public | auth_group                 | table | postgres\n public | auth_group_permissions     | table | postgres\n public | auth_permission            | table | postgres\n public | auth_user                  | table | postgres\n public | auth_user_groups           | table | postgres\n public | auth_user_user_permissions | table | postgres\n public | authtoken_token            | table | postgres\n public | django_admin_log           | table | postgres\n public | django_content_type        | table | postgres\n public | django_migrations          | table | postgres\n public | django_session             | table | postgres\n(11 rows)\n")))),(0,r.kt)("h3",{id:"install-front-end-and-back-end-applications"},"Install Front End and Back End applications"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Run the following commands to create the front end and back end applications "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc apply -f https://raw.githubusercontent.com/nutanix-japan/ocp-saurus/main/docs/ocp_ndb/k8s/component_django.yaml\noc apply -f https://raw.githubusercontent.com/nutanix-japan/ocp-saurus/main/docs/ocp_ndb/k8s/component_react.yaml\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Output - you will see deployments and services created"',title:'"Output',"-":!0,you:!0,will:!0,see:!0,deployments:!0,and:!0,services:!0,'created"':!0},"deployment.apps/django-deployment created\nservice/django-cluster-ip-service created\n#\ndeployment.apps/react-deployment created\nservice/react-cluster-ip-service created\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Make sure all the pods are running "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Make sure all pods are running"',title:'"Make',sure:!0,all:!0,pods:!0,are:!0,'running"':!0},"oc get po \n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Output"',title:'"Output"'},"oc get po \nNAME                                 READY   STATUS      RESTARTS   AGE\ndjango-deployment-5b96897c59-cqhmp   1/1     Running     0          2m15s\ndjango-deployment-5b96897c59-m927z   1/1     Running     0          2m15s\ndjango-deployment-5b96897c59-nw85m   1/1     Running     0          2m15s\ndjango-job-sbctr                     0/1     Completed   0          28m\npsql                                 1/1     Running     0          114m\nreact-deployment-cdff5fdbf-28mnq     1/1     Running     0          2m13s\nreact-deployment-cdff5fdbf-5dhm5     1/1     Running     0          2m13s\nreact-deployment-cdff5fdbf-5lpbt     1/1     Running     0          2m13s\n")))),(0,r.kt)("h3",{id:"create-routes-to-access-the-application"},"Create Routes to Access the Application"),(0,r.kt)("p",null,"We will need to create routes to access the front end and back end applications. "),(0,r.kt)("p",null,"You can access the application through the OCP Routes. "),(0,r.kt)(m,{mdxType:"BrowserWindow"},(0,r.kt)("details",null,(0,r.kt)("summary",null,"Why use OCP Routes but not kubernetes Ingress resource?"),(0,r.kt)("div",null,(0,r.kt)("body",null,(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"OCP works with ",(0,r.kt)("inlineCode",{parentName:"p"},"Routes")," kubernetes resource. Since ",(0,r.kt)("inlineCode",{parentName:"p"},"Routes")," was developed much earlier than ",(0,r.kt)("inlineCode",{parentName:"p"},"Ingress")," resource, we will use ",(0,r.kt)("inlineCode",{parentName:"p"},"Routes")," resource in this lab."),(0,r.kt)("p",{parentName:"admonition"},"Creating ",(0,r.kt)("inlineCode",{parentName:"p"},"Ingress")," will still work, however they will be deployed as ",(0,r.kt)("inlineCode",{parentName:"p"},"Routes")," in OCP.")))))),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Download the routes file"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"wget https://raw.githubusercontent.com/nutanix-japan/ocp-saurus/main/docs/ocp_ndb/k8s/routes.yaml\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Change the URL in the downloaded file to suit OCP cluster name and your domain."))),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"OCP Cluster Name")," - xyz (change to your cluster name)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Domain"),"           - ntnxlab.local (change to your domain name)")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create the routes "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc apply -f routes.yaml\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Check the routes"',title:'"Check',the:!0,'routes"':!0},"oc get routes | awk '{print $1,$2,$3}'\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Output"',title:'"Output"'},"NAME           HOST/PORT                                         PATH\nroute-path-a   flower.apps.hackathon.hackathon8.ntnxlab.local    /\nroute-path-b   flower.apps.hackathon.hackathon8.ntnxlab.local    /admin\nroute-path-c   flower.apps.hackathon.hackathon8.ntnxlab.local    /api\nroute-path-d   flower.apps.hackathon.hackathon8.ntnxlab.local    /static/admin/\nroute-path-e   flower.apps.hackathon.hackathon8.ntnxlab.local    /static/rest_framework/\nroute-path-f   flower.apps.hackathon.hackathon8.ntnxlab.local    /static/\nroute-path-g   flower.apps.hackathon.hackathon8.ntnxlab.local    /media/\n")))),(0,r.kt)("h3",{id:"testing-front-end-react-application"},"Testing Front End React Application"),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Logon to your Windows Tools VM "),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Username")," - ",(0,r.kt)("a",{parentName:"p",href:"mailto:administrator@ntnxlab.local"},"administrator@ntnxlab.local"))),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Password")," - default password"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Open the following URL in Chrome browser to access the Front End React application"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-url"},"http://flower.apps.xyz.ntnxlab.local/\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Enter the following credentials and click on ",(0,r.kt)("strong",{parentName:"p"},"SIGN IN")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Username")," - admin")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Password")," - admin_password")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{src:a(9766).Z,width:"1000",height:"625"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Move the sliders accross and click on ",(0,r.kt)("strong",{parentName:"p"},"Predict")," to get flower names based on their physical attributes"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{src:a(9767).Z,width:"847",height:"500"})))),(0,r.kt)("p",null,"Now that we have finished testing the front end React application, let's move on to testing back end Django application."),(0,r.kt)("h3",{id:"testing-back-end-django-application"},"Testing Back End Django Application"),(0,r.kt)("p",null,"Django application is used to manage users that will access and manage the front end React application."),(0,r.kt)("p",null,"We will create a new user in the Django application which we will then use in authenicating to front end React application."),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Open the following URL in Chrome browser to access the Front End React application"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-url"},"http://flower.apps.xyz.ntnxlab.local/admin \n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Enter the following credentials and click on ",(0,r.kt)("strong",{parentName:"p"},"SIGN IN")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Username")," - admin")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Password")," - admin_password")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{src:a(4340).Z,width:"1174",height:"485"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click on ",(0,r.kt)("strong",{parentName:"p"},"+ Add")," to add users "),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{src:a(5504).Z,width:"1110",height:"314"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Enter the following details:"),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Username")," - ",(0,r.kt)("em",{parentName:"p"},"Your-Initials-user")," (e.g. xyz-user)")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Password")," - password of your choice (make sure to remember this)")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Password confirmation")," - re-enter the password of your choice"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Click on ",(0,r.kt)("strong",{parentName:"p"},"SAVE"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Check the confirmation message "),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{src:a(1471).Z,width:"1142",height:"337"}))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Return to front end React application and test the new credentials. ")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Check if you are able to login with the newly created credentials. Play around with the flower name prediction AI application."),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-url"},"http://flower.apps.xyz.ntnxlab.local/admin \n")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Username")," - ",(0,r.kt)("em",{parentName:"p"},"Your-Initials-user")," (e.g. xyz-user)")),(0,r.kt)("blockquote",{parentName:"li"},(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Password")," - password of your choice from previous step")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{src:a(5298).Z,width:"1153",height:"475"})),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("img",{src:a(9585).Z,width:"1184",height:"491"})))),(0,r.kt)("h3",{id:"checking-postgres-database-data"},"Checking Postgres Database Data"),(0,r.kt)("p",null,"In this section we will confirm that the new user we created in from the back end Django app is present in the database "),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Log back into the database to check if there are new users "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Login to the psql pod and connect to database server"',title:'"Login',to:!0,the:!0,psql:!0,pod:!0,and:!0,connect:!0,database:!0,'server"':!0},"oc exec -it psql -- /bin/sh\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Inside the Postgres pod, logon to the predictiondb database"',title:'"Inside',the:!0,Postgres:!0,"pod,":!0,logon:!0,to:!0,predictiondb:!0,'database"':!0},"psql -h dbforflower-svc -p 80 -U postgres -d predictiondb\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Enter postgres_password as the password"',title:'"Enter',postgres_password:!0,as:!0,the:!0,'password"':!0},'# psql -h dbforflower-svc -p 80 -U postgres -d predictiondb\nPassword for user postgres: \npsql (9.4.5, server 10.4)\nWARNING: psql major version 9.4, server major version 10.4.\n         Some psql features might not work.\nType "help" for help.\n\npredictiondb=#\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Execute the following query "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"SELECT username, last_login FROM auth_user;\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-text",metastring:'title="Output of query"',title:'"Output',of:!0,'query"':!0},"predictiondb=# SELECT username, last_login FROM auth_user;\n\nusername |          last_login           \n----------+-------------------------------\nbabu     | 2022-12-13 08:27:43.411894+00\nadmin    | 2022-12-14 01:38:41.480801+00\nxyz-user | 2022-12-14 01:38:53.474404+00  # << This is your new user\n(3 rows)\n")))),(0,r.kt)("p",null,"This proves that all data is present in the datastore (Postgres in a VM deployed by NDB) of the application. "),(0,r.kt)("h2",{id:"takeaways"},"Takeaways"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"NDB Operator provides ease of use for developers, DevOps engineers, administrators to deploy and use VM based databases without leaving the OCP (kubernetes) ecosystem."),(0,r.kt)("li",{parentName:"ul"},"Deploying databases is as simple as creating a yaml manifest file "),(0,r.kt)("li",{parentName:"ul"},"NDB deployed databases are available as a kubernetes ",(0,r.kt)("inlineCode",{parentName:"li"},"service")," for other microservices in the ecosystem to connect to")))}k.isMDXComponent=!0},1471:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/add-user-confirm-987df6cb5d692bfee5a3647779e043fb.png"},5504:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/add-user-9245a1159180f589523b77e623add1dd.png"},4340:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/django-splash-05297311cfd3ac990faeb0ebb309b29f.png"},5188:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/execute-71fa7c0fa7a2dd773f9a493d388f20ce.png"},6657:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/ndbprogress-a891178f69fabe5a939ce92ece48c272.png"},9585:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/react-new-signin-splash-c84aa9fd97a0cd567dc0deafe313b86e.png"},5298:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/react-new-signin-9364b9090ec334563417b06b8e5c2378.png"},9767:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/react-prediction-d87e852dd480aeefe649e5d8ae3a9818.png"},9766:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/react-splash-18b27e0117af4606275450cff10d1f3f.png"},7759:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/response-ff61a70b5f3537156f106678298e6100.png"},7868:(e,t,a)=>{a.d(t,{Z:()=>n});const n=a.p+"assets/images/tryitout-943e84a25f6199045201fc2790934172.png"}}]);