"use strict";(self.webpackChunkocp_saurus_2=self.webpackChunkocp_saurus_2||[]).push([[4253],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),d=r,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return n?a.createElement(g,s(s({ref:t},p),{},{components:n})):a.createElement(g,s({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:r,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>s});var a=n(7294),r=n(6010);const o="tabItem_Ymn6";function s(e){let{children:t,hidden:n,className:s}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:n},t)}},5488:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(7462),r=n(7294),o=n(6010),s=n(2389),i=n(7392),l=n(7094),c=n(2466);const p="tabList__CuJ",m="tabItem_LNqP";function u(e){const{lazy:t,block:n,defaultValue:s,values:u,groupId:d,className:g}=e,h=r.Children.map(e.children,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)})),f=u??h.map((e=>{let{props:{value:t,label:n,attributes:a}}=e;return{value:t,label:n,attributes:a}})),k=(0,i.l)(f,((e,t)=>e.value===t.value));if(k.length>0)throw new Error(`Docusaurus error: Duplicate values "${k.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`);const N=null===s?s:s??h.find((e=>e.props.default))?.props.value??h[0].props.value;if(null!==N&&!f.some((e=>e.value===N)))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${N}" but none of its children has the corresponding value. Available values are: ${f.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);const{tabGroupChoices:b,setTabGroupChoices:v}=(0,l.U)(),[y,C]=(0,r.useState)(N),O=[],{blockElementScrollPositionUntilNextRender:x}=(0,c.o5)();if(null!=d){const e=b[d];null!=e&&e!==y&&f.some((t=>t.value===e))&&C(e)}const _=e=>{const t=e.currentTarget,n=O.indexOf(t),a=f[n].value;a!==y&&(x(t),C(a),null!=d&&v(d,String(a)))},E=e=>{let t=null;switch(e.key){case"Enter":_(e);break;case"ArrowRight":{const n=O.indexOf(e.currentTarget)+1;t=O[n]??O[0];break}case"ArrowLeft":{const n=O.indexOf(e.currentTarget)-1;t=O[n]??O[O.length-1];break}}t?.focus()};return r.createElement("div",{className:(0,o.Z)("tabs-container",p)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},g)},f.map((e=>{let{value:t,label:n,attributes:s}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:y===t?0:-1,"aria-selected":y===t,key:t,ref:e=>O.push(e),onKeyDown:E,onClick:_},s,{className:(0,o.Z)("tabs__item",m,s?.className,{"tabs__item--active":y===t})}),n??t)}))),t?(0,r.cloneElement)(h.filter((e=>e.props.value===y))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},h.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==y})))))}function d(e){const t=(0,s.Z)();return r.createElement(u,(0,a.Z)({key:String(t)},e))}},384:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>m});var a=n(7462),r=(n(7294),n(3905)),o=n(5488),s=n(5162);const i={sidebar_position:7,title:"Option 2: Create Volume SC using Command Line"},l="Option 2: Create Nutanix Volume Storage Class using Command Line",c={unversionedId:"ocp_ntnx_hci/ocp_sc_volume2",id:"ocp_ntnx_hci/ocp_sc_volume2",title:"Option 2: Create Volume SC using Command Line",description:"1.  Depending on the OCP cluster installation you chose, log on to the LinuxToolsVM1,2,3 or 4 or LB_DNS VM to be able to access OCP cluster.",source:"@site/docs/ocp_ntnx_hci/ocp_sc_volume2.mdx",sourceDirName:"ocp_ntnx_hci",slug:"/ocp_ntnx_hci/ocp_sc_volume2",permalink:"/ocp-saurus2/ocp_ntnx_hci/ocp_sc_volume2",draft:!1,editUrl:"https://github.com/mat0606/ocp-saurus2/edit/main/docs/ocp_ntnx_hci/ocp_sc_volume2.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Option 2: Create Volume SC using Command Line"},sidebar:"tutorialSidebar",previous:{title:"Option 1: Create Nutanix Volume Storage Class using Redhat OpenShift Console",permalink:"/ocp-saurus2/ocp_ntnx_hci/ocp_sc_volume"},next:{title:"Create Persistent Volume Claim for Nutanix Volume",permalink:"/ocp-saurus2/ocp_ntnx_hci/ocp_volume_pvc"}},p={},m=[],u={toc:m};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"option-2-create-nutanix-volume-storage-class-using-command-line"},"Option 2: Create Nutanix Volume Storage Class using Command Line"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Depending on the OCP cluster installation you chose, log on to the ",(0,r.kt)("strong",{parentName:"p"},"LinuxToolsVM1,2,3 or 4")," or ",(0,r.kt)("strong",{parentName:"p"},"LB_DNS")," VM to be able to access OCP cluster. "),(0,r.kt)("admonition",{parentName:"li",title:"How did you install OCP?",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"If you installed OCP using NCM (Calm), you will be performing commands in ",(0,r.kt)("strong",{parentName:"p"},"LB_DNS")," VM's console."),(0,r.kt)("p",{parentName:"admonition"},"We suggest doing the following when modifications to commands are required:"),(0,r.kt)("ol",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Edit code from lab instructions using vi/nano/vim")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Modify the required fields (highlighted)")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Paste the commands into the terminal of LB_DNS vm through Calm UI"))),(0,r.kt)("p",{parentName:"admonition"},"Use the following key combinations to paste content into Calm invoked terminal. "),(0,r.kt)(o.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,r.kt)(s.Z,{value:"mac",label:"macOS",mdxType:"TabItem"},"Use ",(0,r.kt)("b",null,"Command + v")," to paste."),(0,r.kt)(s.Z,{value:"win",label:"Windows",mdxType:"TabItem"},"Use ",(0,r.kt)("b",null,"Shift + Insert")," to paste.")))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Export the OCP cluster's KUBECONFIG file to environment so we can perform ",(0,r.kt)("inlineCode",{parentName:"p"},"oc")," commands"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="On NCM deployed OCP Clusters - use LB_DNS VM"',title:'"On',NCM:!0,deployed:!0,OCP:!0,Clusters:!0,"-":!0,use:!0,LB_DNS:!0,'VM"':!0},"export KUBECONFIG=~/openshift/auth/kubeconfig\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="On IPI deployed OCP Clusters - use UserXX-LinuxToolsVM"',title:'"On',IPI:!0,deployed:!0,OCP:!0,Clusters:!0,"-":!0,use:!0,'UserXX-LinuxToolsVM"':!0},"export KUBECONFIG=/root/xyz/auth/kubeconfig \n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a kubernetes secret that the StorageClass can use to access the Nutanix HCI storage"),(0,r.kt)("p",{parentName:"li"},"Copy the following Secret configuration script, modify required fields (high-lighted)"),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Open a text editor (vi / nano), paste the contents below and change the fields indicated to suit your environment. Example is also provided")),(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Be sure to use your environment's details for the following fields:")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Prism Element IP"),(0,r.kt)("li",{parentName:"ul"},"Prism Element UserName"),(0,r.kt)("li",{parentName:"ul"},"Prism Element Password")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:"{8}","{8}":!0},"cat << EOF > csi_secret.yaml\napiVersion: v1\nkind: Secret\nmetadata:\n  name: ntnx-secret\n  namespace: openshift-cluster-csi-drivers\nstringData:\n  key: <Prism Element IP>:9440:<Prism Element UserName>:<Prism Element Password>    # << change this\n  # example: \n  # key: 10.38.2.71:9440:admin:password\nEOF\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Modify the highlighted fields to suit your environment\nvi csi_secret.yaml\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Create the secret \noc apply -f csi_secret.yaml\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# example output here for the above command\n# secret/ntnx-secret created\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Copy the following StorageClass configuration script, modify ",(0,r.kt)("inlineCode",{parentName:"p"},"Storage Container Name")," field and execute it in the command line"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-zsh",metastring:"{15}","{15}":!0},'cat << EOF >  storageclass.yaml\nkind: StorageClass\napiVersion: storage.k8s.io/v1\nmetadata:\n  name: nutanix-volumes\nprovisioner: csi.nutanix.com\nparameters:\n  csi.storage.k8s.io/provisioner-secret-name: ntnx-secret\n  csi.storage.k8s.io/provisioner-secret-namespace: openshift-cluster-csi-drivers\n  csi.storage.k8s.io/node-publish-secret-name: ntnx-secret\n  csi.storage.k8s.io/node-publish-secret-namespace: openshift-cluster-csi-drivers\n  csi.storage.k8s.io/controller-expand-secret-name: ntnx-secret\n  csi.storage.k8s.io/controller-expand-secret-namespace: openshift-cluster-csi-drivers\n  csi.storage.k8s.io/fstype: ext4\n  storageContainer: Default           ## << Change this to match your Storage Container\n  storageType: NutanixVolumes\n  isLVMVolume: "true"\n  numLVMDisks: "4"\nallowVolumeExpansion: true\nreclaimPolicy: Delete\nEOF\n')),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Modify the highlighted fields to suit your environment\nvi storageclass.yaml\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# Create the storage class \noc apply -f storageclass.yaml\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-buttonless",metastring:'title="Output"',title:'"Output"'},"storageclass.storage.k8s.io/nutanix-volumes created\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Make this your default StorageClass"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'oc patch storageclass nutanix-volumes -p \'{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}\'\n#\noc get sc\n'))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"List your StorageClass"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"oc get StorageClass -A\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-buttonless",metastring:'title="Output"',title:'"Output"'},"NAME                      PROVISIONER       RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE\nnutanix-volumes(default)   csi.nutanix.com   Delete          Immediate           true                   4m\n"))),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Create a machine config to make sure iSCSI service starts in worker and master nodes. "),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Start iSCSI service for worker nodes"',title:'"Start',iSCSI:!0,service:!0,for:!0,worker:!0,'nodes"':!0},"cat << EOF | oc apply -f -\napiVersion: machineconfiguration.openshift.io/v1\nkind: MachineConfig\nmetadata:\n  labels:\n    machineconfiguration.openshift.io/role: worker\n  name: 99-worker-custom-enable-iscsid\nspec:\n  config:\n    ignition:\n      version: 3.1.0\n  systemd:\n    units:\n     - enabled: true\n       name: iscsid.service\nEOF\n")),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-bash",metastring:'title="Optional - Start iSCSI service for masters nodes"',title:'"Optional',"-":!0,Start:!0,iSCSI:!0,service:!0,for:!0,masters:!0,'nodes"':!0},"cat << EOF | oc apply -f -\napiVersion: machineconfiguration.openshift.io/v1\nkind: MachineConfig\nmetadata:\n  labels:\n    machineconfiguration.openshift.io/role: master\n  name: 99-master-custom-enable-iscsid\nspec:\n  config:\n    ignition:\n      version: 3.1.0\n  systemd:\n    units:\n     - enabled: true\n       name: iscsid.service\nEOF\n")))),(0,r.kt)("p",null,"We have sucessfully installed Nutanix StorageClass so we can provision Physical Volumes (PV) and Physical Volume Claims (PVC) for the applications we will be deploying in this OCP cluster."))}d.isMDXComponent=!0}}]);